// Generated by IcedCoffeeScript 1.7.1-e
(function() {
  var Base, Subkey, SubkeyBase, constants, iced, make_esc, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  exports.SubkeyBase = SubkeyBase = (function(_super) {
    __extends(SubkeyBase, _super);

    function SubkeyBase() {
      return SubkeyBase.__super__.constructor.apply(this, arguments);
    }

    SubkeyBase.prototype.get_subkey = function() {
      return null;
    };

    SubkeyBase.prototype.get_subkm = function() {
      return null;
    };

    SubkeyBase.prototype.set_subkey = function(s) {};

    SubkeyBase.prototype.get_field = function() {
      return null;
    };

    SubkeyBase.prototype._v_generate = function(opts, cb) {
      var armored, eng, esc, msg, obj, type, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_v_generate");
      (function(_this) {
        return (function(__iced_k) {
          if ((_this.get_subkey() == null) && (_this.get_subkey() != null)) {
            eng = _this.get_subkm().make_sig_eng();
            msg = _this.km.get_ekid().toString('hex');
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/proofs/src/subkey.iced",
                funcname: "SubkeyBase._v_generate"
              });
              eng.box(msg, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    armored = arguments[0].armored;
                    return type = arguments[0].type;
                  };
                })(),
                lineno: 19
              })));
              __iced_deferrals._fulfill();
            })(function() {
              obj = {
                kid: _this.get_subkm().get_ekid().toString('hex'),
                reverse_sig: {
                  sig: armored,
                  type: type
                }
              };
              return __iced_k(_this.set_subkey(obj));
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    SubkeyBase.prototype._json = function() {
      var ret;
      ret = SubkeyBase.__super__._json.call(this, {});
      ret.body[this.get_field()] = this.get_subkey();
      return ret;
    };

    return SubkeyBase;

  })(Base);

  exports.Subkey = Subkey = (function(_super) {
    __extends(Subkey, _super);

    Subkey.prototype.get_field = function() {
      return "subkey";
    };

    Subkey.prototype.get_subkey = function() {
      return this.subkey;
    };

    Subkey.prototype.get_subkm = function() {
      return this.subkm;
    };

    Subkey.prototype.set_subkey = function(s) {
      return this.subkey = s;
    };

    Subkey.prototype._type = function() {
      return constants.sig_types.subkey;
    };

    function Subkey(obj) {
      this.subkey = obj.subkey;
      this.subkm = obj.subkm;
      Subkey.__super__.constructor.call(this, obj);
    }

    return Subkey;

  })(SubkeyBase);

}).call(this);
