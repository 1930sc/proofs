// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var BaseScraper, constants, iced, v_codes, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  constants = require('../constants').constants;

  v_codes = constants.v_codes;

  BaseScraper = (function() {
    function BaseScraper(_arg) {
      var log_level;
      this.libs = _arg.libs, log_level = _arg.log_level, this.proxy = _arg.proxy;
      this.log_level = log_level || "debug";
    }

    BaseScraper.prototype.hunt = function(username, signature, cb) {
      return hunt2({
        username: username,
        signature: signature
      }, cb);
    };

    BaseScraper.prototype.hunt2 = function(args, cb) {
      return cb(new Error("unimplemented"));
    };

    BaseScraper.prototype.id_to_url = function(username, status_id) {};

    BaseScraper.prototype.check_status = function(_arg, cb) {
      var signature, status_id, url, username;
      username = _arg.username, url = _arg.url, signature = _arg.signature, status_id = _arg.status_id;
    };

    BaseScraper.prototype.log = function(msg) {
      var k;
      if (((k = this.libs.log) != null) && (this.log_level != null)) {
        return k[this.log_level](msg);
      }
    };

    BaseScraper.prototype.validate = function(_arg, cb) {
      var api_url, err, proof_text_check, rc, remote_id, signature, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      api_url = _arg.api_url, username = _arg.username, signature = _arg.signature, proof_text_check = _arg.proof_text_check, remote_id = _arg.remote_id;
      err = null;
      rc = null;
      if (!this._check_api_url({
        api_url: api_url,
        username: username
      })) {
        err = new Error("check url failed for " + api_url + ", " + username);
      } else {
        err = this._validate_text_check({
          signature: signature,
          proof_text_check: proof_text_check
        });
      }
      (function(_this) {
        return (function(__iced_k) {
          if (err == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/proofs/src/scrapers/base.iced",
                funcname: "BaseScraper.validate"
              });
              _this.check_status({
                signature: proof_text_check,
                username: username,
                api_url: api_url,
                remote_id: remote_id
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return rc = arguments[1];
                  };
                })(),
                lineno: 35
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, rc);
        };
      })(this));
    };

    BaseScraper.prototype._get_url_body = function(opts, cb) {
      var body, err, rc, response, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);

      /*
        cb(err, body) only replies with body if status is 200
       */
      body = null;
      if (this.proxy != null) {
        opts.proxy = this.proxy;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/scrapers/base.iced",
            funcname: "BaseScraper._get_url_body"
          });
          _this.libs.request(opts, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                response = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 46
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          rc = typeof err !== "undefined" && err !== null ? v_codes.HOST_UNREACHABLE : response.statusCode === 200 ? v_codes.OK : response.statusCode >= 500 ? v_codes.HTTP_500 : response.statusCode >= 400 ? v_codes.HTTP_400 : response.statusCode >= 300 ? v_codes.HTTP_300 : v_codes.HTTP_OTHER;
          return cb(err, rc, body);
        };
      })(this));
    };

    return BaseScraper;

  })();

  exports.BaseScraper = BaseScraper;

}).call(this);
