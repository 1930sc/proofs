// Generated by IcedCoffeeScript 1.7.1-e
(function() {
  var BaseScraper, GlobalHunter, Lock, PREFIX, RedditScraper, SUBREDDIT, constants, decode, iced, make_esc, make_ids, v_codes, __iced_k, __iced_k_noop, _global_hunter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  BaseScraper = require('./base').BaseScraper;

  constants = require('../constants').constants;

  v_codes = constants.v_codes;

  decode = require('pgp-utils').armor.decode;

  Lock = require('iced-lock').Lock;

  make_esc = require('iced-error').make_esc;

  make_ids = require('../base').make_ids;

  PREFIX = "https://www.reddit.com";

  SUBREDDIT = PREFIX + "/r/keybaseproofs";

  GlobalHunter = (function() {
    function GlobalHunter() {
      this._startup_window = 20 * 60;
      this._delay = 5000;
      this._running = false;
      this._lock = new Lock;
      this._cache = {};
      this._list = [];
      this._last_rc = null;
    }

    GlobalHunter.prototype.index = function(lst) {
      var author, data, el, existing, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = lst.length; _i < _len; _i++) {
        el = lst[_i];
        data = el.data;
        author = data.author.toLowerCase();
        existing = this._cache[author];
        if ((existing == null) || existing.data.name !== data.name) {
          this._scraper.log("| Indexing " + author + ": " + data.name + " @ " + data.created_utc + " (" + PREFIX + data.permalink + ")");
        }
        _results.push(this._cache[author] = el);
      }
      return _results;
    };

    GlobalHunter.prototype.go_back = function(stop, cb) {
      var after, args, body, err, esc, go, lst, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      after = null;
      go = true;
      esc = make_esc(cb, "go_back");
      lst = [];
      console.log("go back!");
      console.log("Stoppage - >");
      console.log(stop);
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!go) {
              return _break();
            } else {
              args = {
                url: SUBREDDIT + "/.json",
                json: true,
                qs: {
                  count: 25
                }
              };
              if (after != null) {
                args.qs.after = after;
              }
              console.log("after");
              console.log(after);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
                  funcname: "GlobalHunter.go_back"
                });
                _this._scraper._get_url_body(args, __iced_deferrals.defer({
                  assign_fn: (function(__slot_1) {
                    return function() {
                      err = arguments[0];
                      __slot_1._last_rc = arguments[1];
                      return body = arguments[2];
                    };
                  })(_this),
                  lineno: 56
                }));
                __iced_deferrals._fulfill();
              })(function() {
                after = body.data.after;
                lst = lst.concat(body.data.children);
                if ((after == null) || body.data.children.slice(-1)[0].created_utc < stop) {
                  go = false;
                }
                console.log("again?");
                return _next(console.log(go));
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          console.log("done.");
          lst.reverse();
          console.log(lst);
          _this._list = _this._list.concat(lst);
          _this.index(_this._list);
          return cb(null);
        };
      })(this));
    };

    GlobalHunter.prototype.scrape = function(cb) {
      var err, stop, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      stop = this._list.length ? this._list.slice(-1)[0].created_utc : Math.ceil(Date.now() / 1000) - this._startup_window;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
            funcname: "GlobalHunter.scrape"
          });
          _this.go_back(stop, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 74
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    GlobalHunter.prototype.start_scraper_loop = function(_arg, cb) {
      var err, scraper, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      scraper = _arg.scraper;
      this._scraper = scraper;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
            funcname: "GlobalHunter.start_scraper_loop"
          });
          _this.scrape(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 81
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _results, _while;
          _this._running = true;
          cb(err);
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!true) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
                  funcname: "GlobalHunter.start_scraper_loop"
                });
                setTimeout(__iced_deferrals.defer({
                  lineno: 85
                }), _this._delay);
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
                    funcname: "GlobalHunter.start_scraper_loop"
                  });
                  _this.scrape(__iced_deferrals.defer({
                    lineno: 86
                  }));
                  __iced_deferrals._fulfill();
                })(_next);
              });
            }
          };
          _while(__iced_k);
        };
      })(this));
    };

    GlobalHunter.prototype.find = function(_arg, cb) {
      var err, out, rc, scraper, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      scraper = _arg.scraper, username = _arg.username;
      err = out = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
            funcname: "GlobalHunter.find"
          });
          _this._lock.acquire(__iced_deferrals.defer({
            lineno: 92
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (!_this._running) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
                  funcname: "GlobalHunter.find"
                });
                _this.start_scraper_loop({
                  scraper: scraper
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 94
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            _this._lock.release();
            rc = err != null ? _this._last_rc : (out = _this._cache[username]) != null ? v_codes.OK : v_codes.NOT_FOUND;
            return cb(err, rc, out);
          });
        };
      })(this));
    };

    return GlobalHunter;

  })();

  _global_hunter = new GlobalHunter();

  exports.RedditScraper = RedditScraper = (function(_super) {
    __extends(RedditScraper, _super);

    function RedditScraper(opts) {
      RedditScraper.__super__.constructor.call(this, opts);
    }

    RedditScraper.prototype._check_args = function(args) {
      if (!(args.username != null)) {
        return new Error("Bad args to Reddit proof: no username given");
      } else if (!(args.name != null) || (args.name !== 'reddit')) {
        return new Error("Bad args to Reddit proof: type is " + args.name);
      } else {
        return null;
      }
    };

    RedditScraper.prototype.hunt2 = function(_arg, cb) {
      var err, json, name, out, proof_text_check, rc, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, proof_text_check = _arg.proof_text_check, name = _arg.name;
      rc = v_codes.OK;
      out = {};
      (function(_this) {
        return (function(__iced_k) {
          if ((err = _this._check_args({
            username: username,
            name: name
          })) == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
                funcname: "RedditScraper.hunt2"
              });
              _global_hunter.find({
                scraper: _this,
                username: username
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    rc = arguments[1];
                    return json = arguments[2];
                  };
                })(),
                lineno: 128
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(rc === v_codes.OK ? out = {
                api_url: PREFIX + json.data.permalink + ".json",
                human_url: PREFIX + json.data.permalink,
                remote_id: json.data.name
              } : void 0);
            });
          } else {
            return __iced_k(rc = v_codes.BAD_USERNAME);
          }
        });
      })(this)((function(_this) {
        return function() {
          out.rc = rc;
          return cb(err, out);
        };
      })(this));
    };

    RedditScraper.prototype._check_api_url = function(_arg) {
      var api_url, rxx, username;
      api_url = _arg.api_url, username = _arg.username;
      rxx = new RegExp("^" + SUBREDDIT, "i");
      return (api_url != null) && api_url.match(rxx);
    };

    RedditScraper.prototype._validate_text_check = function(_arg) {
      var err, med_id, msg, proof_text_check, signature, _ref;
      signature = _arg.signature, proof_text_check = _arg.proof_text_check;
      _ref = decode(signature), err = _ref[0], msg = _ref[1];
      if (err == null) {
        med_id = make_ids(msg.body).med_id;
        if (proof_text_check.indexOf(med_id) < 0) {
          err = new Error("Bad payload text_check");
        }
      }
      return err;
    };

    RedditScraper.prototype.unpack_data = function(json) {
      var parent, _ref, _ref1, _ref2, _ref3, _ref4;
      if ((((_ref = json[0]) != null ? _ref.kind : void 0) === 'Listing') && (((_ref1 = (parent = (_ref2 = json[0]) != null ? (_ref3 = _ref2.data) != null ? (_ref4 = _ref3.children) != null ? _ref4[0] : void 0 : void 0 : void 0)) != null ? _ref1.kind : void 0) === 't3')) {
        return parent.data;
      } else {
        return null;
      }
    };

    RedditScraper.prototype.check_data = function(_arg) {
      var body, json, line, lstrip, med_id, proof_text_check, username;
      json = _arg.json, username = _arg.username, proof_text_check = _arg.proof_text_check, med_id = _arg.med_id;
      if (!((json.subreddit != null) && (json.author != null) && (json.selftext != null) && json.title)) {
        return v_codes.CONTENT_FAILURE;
      } else if (json.subreddit.toLowerCase() !== 'keybaseproofs') {
        return v_codes.CONTENT_FAILURE;
      } else if (json.author.toLowerCase() !== username.toLowerCase()) {
        return v_codes.BAD_USERNAME;
      } else if (false && (json.title.indexOf(med_id) < 0)) {
        return v_codes.TEXT_NOT_FOUND;
      } else {
        lstrip = function(line) {
          var m;
          if ((m = line.match(/^\s+(.*?)$/)) != null) {
            return m[1];
          } else {
            return line;
          }
        };
        body = ((function() {
          var _i, _len, _ref, _results;
          _ref = json.selftext.split("\n");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            _results.push(lstrip(line));
          }
          return _results;
        })()).join("\n");
        if (body.indexOf(proof_text_check) < 0) {
          return v_codes.TEXT_NOT_FOUND;
        } else {
          return v_codes.OK;
        }
      }
    };

    RedditScraper.prototype.check_status = function(_arg, cb) {
      var api_url, dat, err, json, med_id, proof_text_check, rc, remote_id, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, api_url = _arg.api_url, proof_text_check = _arg.proof_text_check, remote_id = _arg.remote_id;
      med_id = make_ids(new Buffer(proof_text_check, 'base64')).med_id;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/proofs/src/scrapers/reddit.iced",
            funcname: "RedditScraper.check_status"
          });
          _this._get_url_body({
            url: api_url,
            json: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                rc = arguments[1];
                return json = arguments[2];
              };
            })(),
            lineno: 188
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          rc = rc !== v_codes.OK ? rc : !(dat = _this.unpack_data(json)) ? v_codes.CONTENT_FAILURE : _this.check_data({
            json: dat,
            username: username,
            proof_text_check: proof_text_check,
            med_id: med_id
          });
          return cb(err, rc);
        };
      })(this));
    };

    return RedditScraper;

  })(BaseScraper);

}).call(this);
