// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var BaseScraper, TwitterScraper, constants, decode, iced, make_ids, v_codes, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  BaseScraper = require('./base').BaseScraper;

  make_ids = require('../base').make_ids;

  constants = require('../constants').constants;

  v_codes = constants.v_codes;

  decode = require('pgp-utils').armor.decode;

  exports.TwitterScraper = TwitterScraper = (function(_super) {
    __extends(TwitterScraper, _super);

    function TwitterScraper(_arg) {
      var libs;
      libs = _arg.libs;
      TwitterScraper.__super__.constructor.call(this, {
        libs: libs
      });
    }

    TwitterScraper.prototype.hunt = function(username, signature, cb) {
      var $, api_url, err, html, human_url, item, out, p, rc, remote_id, stream, stream_item, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      out = {};
      rc = v_codes.OK;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/scrapers/twitter.iced",
            funcname: "TwitterScraper.hunt"
          });
          _this._get_url_body("https://twitter.com/" + username, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                rc = arguments[1];
                return html = arguments[2];
              };
            })(),
            lineno: 20
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _len, _ref;
          if (rc === v_codes.OK) {
            $ = _this.libs.cheerio.load(html);
            stream = $('.profile-stream li.stream-item .tweet');
            if (!stream.length) {
              rc = v_codes.CONTENT_FAILURE;
              if ($('.stream-protected').length) {
                rc = v_codes.PERMISSION_DENIED;
              }
            } else {
              rc = v_codes.NOT_FOUND;
              for (_i = 0, _len = stream.length; _i < _len; _i++) {
                stream_item = stream[_i];
                item = $(stream_item);
                if ((((_ref = item.data('screenName')) != null ? _ref.toLowerCase() : void 0) === username.toLowerCase()) && (item.data('tweetId') != null)) {
                  p = item.find('p.tweet-text');
                  if ((p.first().html().indexOf(signature)) === 0) {
                    rc = v_codes.OK;
                    remote_id = item.data('tweetId');
                    api_url = human_url = _this._id_to_url(username, remote_id);
                    out = {
                      remote_id: remote_id,
                      api_url: api_url,
                      human_url: human_url
                    };
                    break;
                  }
                }
              }
            }
          }
          out.rc = rc;
          return cb(err, out);
        };
      })(this));
    };

    TwitterScraper.prototype._id_to_url = function(username, status_id) {
      return "https://twitter.com/" + username + "/status/" + status_id;
    };

    TwitterScraper.prototype._check_api_url = function(_arg) {
      var api_url, username;
      api_url = _arg.api_url, username = _arg.username;
      return api_url.indexOf("https://twitter.com/" + username + "/") === 0;
    };

    TwitterScraper.prototype._validate_text_check = function(_arg) {
      var err, msg, proof_text_check, short_id, signature, _ref;
      signature = _arg.signature, proof_text_check = _arg.proof_text_check;
      _ref = decode(signature), err = _ref[0], msg = _ref[1];
      if (err == null) {
        short_id = make_ids(msg.body).short_id;
        if (proof_text_check.indexOf(" " + short_id + " ") < 0) {
          err = new Error("Cannot find " + short_id + " in " + proof_text_check);
        }
      }
      return err;
    };

    TwitterScraper.prototype.check_status = function(_arg, cb) {
      var $, api_url, div, err, html, p, rc, remote_id, signature, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, api_url = _arg.api_url, signature = _arg.signature, remote_id = _arg.remote_id;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/scrapers/twitter.iced",
            funcname: "TwitterScraper.check_status"
          });
          _this._get_url_body(api_url, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                rc = arguments[1];
                return html = arguments[2];
              };
            })(),
            lineno: 82
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          if (rc === v_codes.OK) {
            $ = _this.libs.cheerio.load(html);
            div = $('.permalink-tweet-container .permalink-tweet');
            if (!div.length) {
              rc = v_codes.FAILED_PARSE;
            } else {
              div = div.first();
              rc = username.toLowerCase() !== ((_ref = div.data('screenName')) != null ? _ref.toLowerCase() : void 0) ? v_codes.BAD_USERNAME : ("" + remote_id) !== ("" + div.data('tweetId')) ? v_codes.BAD_REMOTE_ID : ((p = div.find('p.tweet-text')) == null) || !p.length ? v_codes.MISSING : (p.first().html().indexOf(signature)) === 0 ? v_codes.OK : v_codes.DELETED;
            }
          }
          return cb(err, rc);
        };
      })(this));
    };

    TwitterScraper.prototype._get_url_body = function(url, cb) {
      var body, err, rc, response, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);

      /*
        cb(err, body) only replies with body if status is 200
       */
      body = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/scrapers/twitter.iced",
            funcname: "TwitterScraper._get_url_body"
          });
          _this.libs.request(url, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                response = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 116
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          rc = typeof err !== "undefined" && err !== null ? v_codes.HOST_UNREACHABLE : response.statusCode === 200 ? v_codes.OK : response.statusCode >= 500 ? v_codes.HTTP_500 : response.statusCode >= 400 ? v_codes.HTTP_400 : response.statusCode >= 300 ? v_codes.HTTP_300 : v_codes.HTTP_OTHER;
          return cb(err, rc, body);
        };
      })(this));
    };

    return TwitterScraper;

  })(BaseScraper);

}).call(this);
