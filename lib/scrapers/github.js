// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var BaseScraper, GithubScraper, constants, iced, v_codes, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  BaseScraper = require('./base').BaseScraper;

  constants = require('../constants').constants;

  v_codes = constants.v_codes;

  exports.GithubScraper = GithubScraper = (function(_super) {
    __extends(GithubScraper, _super);

    function GithubScraper(_arg) {
      var libs;
      this.auth = _arg.auth, libs = _arg.libs;
      GithubScraper.__super__.constructor.call(this, {
        libs: libs
      });
    }

    GithubScraper.prototype.hunt = function(username, signature, cb) {
      var err, gist, json, out, rc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      rc = v_codes.OK;
      out = {};
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/scrapers/github.iced",
          funcname: "GithubScraper.hunt"
        });
        _this._get_body("https://api.github.com/users/" + username + "/gists", true, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              rc = arguments[1];
              return json = arguments[2];
            };
          })(),
          lineno: 18
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (rc === v_codes.OK) {
            rc = v_codes.NOT_FOUND;
            (function(__iced_k) {
              var _i, _len, _ref, _results, _while;
              _ref = json;
              _len = _ref.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  gist = _ref[_i];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/scrapers/github.iced",
                      funcname: "GithubScraper.hunt"
                    });
                    _this._search_gist(gist, signature, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return out = arguments[0];
                        };
                      })(),
                      lineno: 22
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      if (out.rc === v_codes.OK) {
                        (function(__iced_k) {
_break()
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(_next);
                  });
                }
              };
              _while(__iced_k);
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          out.rc || (out.rc = rc);
          return cb(err, out);
        });
      });
    };

    GithubScraper.prototype._search_gist = function(gist_json_obj, sig, cb) {
      var content, err, file, filename, id, json, out, rc, u, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      out = {};
      (function(__iced_k) {
        if ((u = gist_json_obj.url) == null) {
          return __iced_k(rc = v_codes.FAILED_PARSE);
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/scrapers/github.iced",
              funcname: "GithubScraper._search_gist"
            });
            _this._get_body(u, true, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  rc = arguments[1];
                  return json = arguments[2];
                };
              })(),
              lineno: 33
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _ref;
            if (rc !== v_codes.OK) {

            } else if (json.files == null) {
              rc = v_codes.FAILED_PARSE;
            } else {
              rc = v_codes.NOT_FOUND;
              _ref = json.files;
              for (filename in _ref) {
                file = _ref[filename];
                if ((content = file.content) != null) {
                  if ((id = content.indexOf(sig)) >= 0) {
                    rc = v_codes.OK;
                    out = {
                      api_url: file.raw_url,
                      remote_id: gist_json_obj.id,
                      human_url: gist_json_obj.html_url
                    };
                    break;
                  }
                }
              }
            }
            return __iced_k();
          });
        }
      })(function() {
        out.rc = rc;
        return cb(out);
      });
    };

    GithubScraper.prototype.check_status = function(_arg, cb) {
      var api_url, err, raw, rc, remote_id, signature, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, api_url = _arg.api_url, signature = _arg.signature, remote_id = _arg.remote_id;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/scrapers/github.iced",
          funcname: "GithubScraper.check_status"
        });
        _this._get_body(api_url, false, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              rc = arguments[1];
              return raw = arguments[2];
            };
          })(),
          lineno: 53
        }));
        __iced_deferrals._fulfill();
      })(function() {
        rc = rc !== v_codes.OK ? rc : (raw.indexOf(signature)) >= 0 ? v_codes.OK : v_codes.NOT_FOUND;
        return cb(err, rc);
      });
    };

    GithubScraper.prototype._get_body = function(url, json, cb) {
      var args;
      this.libs.log.info("+ HTTP request for URL '" + url + "'");
      args = {
        url: url,
        headers: {
          "User-Agent": constants.user_agent
        },
        auth: this.auth
      };
      if (json) {
        args.json = 1;
      }
      return this._get_url_body(args, cb);
    };

    return GithubScraper;

  })(BaseScraper);

}).call(this);
