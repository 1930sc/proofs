// Generated by IcedCoffeeScript 108.0.11
(function() {
  var Attest, Base, body, constants, json_stringify_sorted, make_esc, pgp_utils, schema, streq_secure, unix_time, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('./base').Base;

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  pgp_utils = require('pgp-utils');

  _ref = pgp_utils.util, json_stringify_sorted = _ref.json_stringify_sorted, unix_time = _ref.unix_time, streq_secure = _ref.streq_secure;

  schema = require('./schema3');

  exports.Attest = Attest = (function(_super) {
    __extends(Attest, _super);

    function Attest(obj) {
      this.wot = obj.wot;
      Attest.__super__.constructor.call(this, obj);
    }

    Attest.prototype._v_stub_paths = function() {
      return ["body.wot_attest"];
    };

    Attest.prototype._type = function() {
      return constants.sig_types.wot.attest;
    };

    Attest.prototype._type_v2 = function(revoke_flag) {
      if ((this.revoke != null) || revoke_flag) {
        return constants.sig_types_v2.wot.attest_with_revoke;
      } else {
        return constants.sig_types_v2.wot.attest;
      }
    };

    Attest.prototype._v_check = function(_arg, cb) {
      var json, obj, proof_schema, schm;
      json = _arg.json;
      obj = json.body.wot_attest;
      proof_schema = schema.dict({
        check_data_json: schema.or([
          schema.dict({
            name: schema.string(),
            username: schema.string()
          }), schema.dict({
            domain: schema.string(),
            protocol: schema.string()
          })
        ]),
        state: schema.int(),
        proof_type: schema.int()
      });
      schm = schema.dict({
        user: schema.dict({
          username: schema.string(),
          uid: schema.uid().convert(),
          eldest_seqno: schema.int(),
          last_seqno: schema.int(),
          eldest_kid: schema.kid().convert()
        }),
        confidence: schema.dict({
          proofs: schema.array(proof_schema).optional(),
          vouched_by: schema.array(schema.uid().convert()).optional(),
          keybase_username: schema.string_enum(["audio", "video", "email", "other_chat", "in_person"]).optional(),
          other: schema.string().optional(),
          keybase_history: schema.int().optional()
        }),
        failing_proofs: schema.array(proof_schema).optional(),
        attestation: schema.array(schema.string())
      });
      return cb(schm.check(obj));
    };

    Attest.prototype._v_customize_json = function(ret) {
      var t;
      if ((t = this.wot.attest) != null) {
        return ret.body.wot_attest = t;
      }
    };

    return Attest;

  })(Base);

  body = {
    "client": {
      "version": "5.2.0",
      "name": "keybase.io go client"
    },
    "prev": "afccadcae75cbda35e5d463b0b8eff766c5d66f1b39722f9c93c8a3d2544b32c",
    "tag": "signature",
    "expire_in": 504576000,
    "seqno": 681,
    "body": {
      "version": 2,
      "type": "wot_attest_with_revoke",
      "key": {
        "host": "keybase.io",
        "uid": "dbb165b7879fe7b1174df73bed0b9500",
        "eldest_kid": "01013ef90b4c4e62121d12a51d18569b57996002c8bdccc9b2740935c9e4a07d20b40a",
        "kid": "01203073f406c94fc932c9e2e434631c7626bb0a0aa12e526dc1bec270e7e903f4ec0a",
        "username": "max"
      },
      "merkle_root": {
        "hash": "02ee4d0efc9ad56e345d30f954b1d18fd0deff35611473326124f8b9c10f94af429e567f753ece952dd6f7190bb46a51ac83fceffddde6068045583bfb9ca2b0",
        "hash_meta": "fb594986ac735bd49a66fe4eb7b7e29d8ca99517c37f7de62125d0102dcb87f9",
        "seqno": 14144837,
        "ctime": 1578519663
      },
      "revoke": {
        "sig_ids": ["2fb7d9eaffd97097ebee09258e27fb89ee7048501b8a818040cf58152ea557590f"]
      },
      "attest_hash": "4945b2c25aaf805554e8d6ac28760b0b50c3c46b4b6fe548e48a38aef6823c59",
      "ctime": 1578519669
    }
  };

}).call(this);
