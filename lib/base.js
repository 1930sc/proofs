// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Base, KCP, SHA256, WordArray, base64u, constants, iced, json_stringify_sorted, kbpgp, triplesec, unix_time, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  kbpgp = require('kbpgp');

  constants = require('./constants');

  KCP = kbpgp["const"].openpgp;

  _ref = kbpgp.util, json_stringify_sorted = _ref.json_stringify_sorted, unix_time = _ref.unix_time, base64u = _ref.base64u;

  triplesec = require('triplesec');

  WordArray = triplesec.WordArray;

  SHA256 = triplesec.hash.SHA256;

  Base = (function() {
    function Base(_arg) {
      this.km = _arg.km;
    }

    Base.prototype.hash = function(pgp) {
      return (SHA256.transform(WordArray.from_utf8(pgp))).to_buffer();
    };

    Base.prototype.generate = function(cb) {
      var err, hash, id, json, out, pgp, short_id, signing_key, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      out = null;
      json = json_stringify_sorted(this.json());
      (function(__iced_k) {
        if ((signing_key = _this.km.find_best_pgp_key(KCP.key_flags.sign_data)) == null) {
          return __iced_k(err = new Error("No signing key found"));
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/base.iced",
              funcname: "Base.generate"
            });
            kbpgp.burn({
              msg: json,
              signing_key: signing_key,
              armor: true
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return pgp = arguments[1];
                };
              })(),
              lineno: 28
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(err == null ? (hash = _this.hash(pgp), id = hash.to_hex(), short_id = base64u.encode(hash.slice(0, constants.short_id_bytes)), out = {
              pgp: pgp,
              json: json,
              id: id,
              short_id: short_id
            }) : void 0);
          });
        }
      })(function() {
        return cb(err, out);
      });
    };

    return Base;

  })();

  exports.Base = Base;

}).call(this);
