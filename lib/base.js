// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Base, KCP, Message, SHA256, Verifier, WordArray, akatch, base64u, bufeq_secure, constants, decode, iced, json_stringify_sorted, kbpgp, make_ids, sha256, triplesec, unix_time, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  kbpgp = require('kbpgp');

  constants = require('./constants');

  KCP = kbpgp["const"].openpgp;

  _ref = kbpgp.util, akatch = _ref.akatch, bufeq_secure = _ref.bufeq_secure, json_stringify_sorted = _ref.json_stringify_sorted, unix_time = _ref.unix_time, base64u = _ref.base64u;

  triplesec = require('triplesec');

  WordArray = triplesec.WordArray;

  SHA256 = triplesec.hash.SHA256;

  Message = kbpgp.processor.Message;

  decode = kbpgp.armor.decode;

  sha256 = function(pgp) {
    return (SHA256.transform(WordArray.from_utf8(pgp))).to_buffer();
  };

  make_ids = function(pgp) {
    var hash, id, short_id;
    hash = sha256(pgp);
    id = hash.to_hex();
    short_id = base64u.encode(hash.slice(0, constants.short_id_bytes));
    return {
      id: id,
      short_id: short_id
    };
  };

  Verifier = (function() {
    function Verifier(_arg, km, base) {
      this.pgp = _arg.pgp, this.id = _arg.id, this.short_id = _arg.short_id;
      this.km = km;
      this.base = base;
    }

    Verifier.prototype.verify = function(cb) {
      var esc, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_err(cb, "Verifier::verfiy");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/base.iced",
          funcname: "Verifier.verify"
        });
        _this._check_ids(esc(__iced_deferrals.defer({
          lineno: 32
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/base.iced",
            funcname: "Verifier.verify"
          });
          _this._check_expired(esc(__iced_deferrals.defer({
            lineno: 33
          })));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/base.iced",
              funcname: "Verifier.verify"
            });
            _this._parse_and_process(esc(__iced_deferrals.defer({
              lineno: 34
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/base.iced",
                funcname: "Verifier.verify"
              });
              _this._check_json(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return ret = arguments[0];
                  };
                })(),
                lineno: 35
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, ret);
            });
          });
        });
      });
    };

    Verifier.prototype._check_ids = function(cb) {
      var err, id, short_id, _ref1;
      _ref1 = make_ids(this.pgp), short_id = _ref1.short_id, id = _ref1.id;
      err = !bufeq_secure(id, this.id) ? new Error("Long IDs aren't equal; wanted " + id + " but got " + this.id) : !bufeq_secure(short_id, this.short_id) ? new Error("Short IDs aren't equal: wanted " + short_id + " but got " + this.short_id) : null;
      return cb(err);
    };

    Verifier.prototype._check_expired = function(cb) {
      var err, expired, now;
      now = unix_time();
      expired = now - json.date - json.expire_in;
      err = expired > 0 ? new Error("Expired " + expired + "s ago") : null;
      return cb(err);
    };

    Verifier.prototype._parse_and_process = function(cb) {
      var eng, err, esc, msg, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_err(cb, "Verifier::_parse_and_process");
      err = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/base.iced",
          funcname: "Verifier._parse_and_process"
        });
        akatch((function() {
          return decode(this.pgp);
        }), esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return msg = arguments[0];
            };
          })(),
          lineno: 63
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (msg.type !== KCP.message_types.generic) {
            return __iced_k(err = new Error("wrong mesasge type; expected a generic message"));
          } else {
            eng = new Message(_this.km);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/base.iced",
                funcname: "Verifier._parse_and_process"
              });
              end.parse_and_process(msg.body, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.literals = arguments[0];
                  };
                })(_this),
                lineno: 68
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        })(function() {
          return cb(err);
        });
      });
    };

    Verifier.prototype._check_json = function(cb) {
      var e, err, json, l, n, sw, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = json = null;
      (function(__iced_k) {
        if ((n = _this.literals.length) !== 1) {
          return __iced_k(err = new Error("Expected only one pgp literal; got " + n));
        } else {
          (function(__iced_k) {
            try {
              json = JSON.parse((l = _this.literals[0]).data);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/base.iced",
                  funcname: "Verifier._check_json"
                });
                _this.base._v_check({
                  json: json
                }, esc(__iced_deferrals.defer({
                  lineno: 80
                })));
                __iced_deferrals._fulfill();
              })(function() {
                if ((sw = l.signed_with) == null) {
                  return err = new Error("Expected a signature on the payload message");
                } else if (!bufeq_secure(_this.km.get_pgp_key_id(), sw.get_key_id())) {
                  return err = new Error("Key in signature packet didn't match");
                }
              });
            } catch (_error) {
              e = _error;
              return err = new Error("Couldn't parse JSON signed message: " + e.message);
            }
          })(__iced_k);
        }
      })(function() {
        return cb(err, json);
      });
    };

    return Verifier;

  })();

  Base = (function() {
    function Base(_arg) {
      this.km = _arg.km;
    }

    Base.prototype._v_check = function(obj, cb) {
      return cb(null);
    };

    Base.prototype.json = function(_arg) {
      var body, date, expire_in, out, seqno, tag;
      tag = _arg.tag, expire_in = _arg.expire_in, body = _arg.body, seqno = _arg.seqno;
      expire_in || (expire_in = constants.expire_in);
      tag = constants.tags.sig;
      date = unix_time();
      out = {
        tag: tag,
        expire_in: expire_in,
        body: body,
        date: date
      };
      if (seqno != null) {
        out.seqno = seqno;
      }
      return out;
    };

    Base.prototype.generate = function(cb) {
      var err, id, json, out, pgp, short_id, signing_key, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      out = null;
      json = json_stringify_sorted(this.json());
      (function(__iced_k) {
        if ((signing_key = _this.km.find_best_pgp_key(KCP.key_flags.sign_data)) == null) {
          return __iced_k(err = new Error("No signing key found"));
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/base.iced",
              funcname: "Base.generate"
            });
            kbpgp.burn({
              msg: json,
              signing_key: signing_key,
              armor: true
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return pgp = arguments[1];
                };
              })(),
              lineno: 119
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _ref1;
            return __iced_k(err == null ? ((_ref1 = make_ids(pgp), short_id = _ref1.short_id, id = _ref1.id, _ref1), out = {
              pgp: pgp,
              json: json,
              id: id,
              short_id: short_id
            }) : void 0);
          });
        }
      })(function() {
        return cb(err, out);
      });
    };

    Base.prototype.verify = function(obj, cb) {
      var esc, ret, verifier, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_err(cb, "Base::verfiy");
      verifier = new Verifier(obj, this.km, this);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/base.iced",
          funcname: "Base.verify"
        });
        verifier.verify(esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ret = arguments[0];
            };
          })(),
          lineno: 130
        })));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(null, ret);
      });
    };

    return Base;

  })();

  exports.Base = Base;

}).call(this);
