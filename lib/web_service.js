// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Base, GithubBinding, KeybaseBinding, RemoteBinding, TwitterBinding, WebServiceBinding, bufeq_secure, constants, kbpgp, unix_time, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  kbpgp = require('kbpgp');

  Base = require('./base').Base;

  constants = require('./constants').constants;

  _ref = kbpgp.util, bufeq_secure = _ref.bufeq_secure, unix_time = _ref.unix_time;

  WebServiceBinding = (function(_super) {
    __extends(WebServiceBinding, _super);

    function WebServiceBinding(_arg) {
      var km;
      km = _arg.km, this.seqno = _arg.seqno, this.user = _arg.user, this.host = _arg.host;
      WebServiceBinding.__super__.constructor.call(this, {
        km: km
      });
    }

    WebServiceBinding.prototype._json = function() {
      var o, ret;
      ret = {
        seqno: this.seqno,
        body: {
          version: constants.versions.sig,
          type: constants.sig_types.web_service_binding,
          key: {
            host: this.host,
            username: this.user.local.username,
            uid: this.user.local.uid,
            key_id: this.km.get_pgp_key_id().toString('hex'),
            fingerprint: this.km.get_pgp_fingerprint().toString('hex')
          }
        }
      };
      if ((o = this.service_obj()) != null) {
        ret.body.service = o;
      }
      return WebServiceBinding.__super__._json.call(this, ret);
    };

    WebServiceBinding.prototype._service_obj_check = function(x) {
      return !(x != null);
    };

    WebServiceBinding.prototype._v_check = function(_arg, cb) {
      var a, b, err, fp, json, kid, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      json = _arg.json;
      err = (a = json != null ? (_ref1 = json.body) != null ? (_ref2 = _ref1.key) != null ? _ref2.username : void 0 : void 0 : void 0) !== (b = this.user.local.username) ? new Error("Wrong local user: got '" + a + "' but wanted '" + b + "'") : (a = json != null ? (_ref3 = json.body) != null ? (_ref4 = _ref3.key) != null ? _ref4.uid : void 0 : void 0 : void 0) !== (b = this.user.local.uid) ? new Error("Wrong local uid: got '" + a + "' but wanted '" + b + "'") : (a = json != null ? (_ref5 = json.body) != null ? _ref5.type : void 0 : void 0) !== (b = constants.sig_types.web_service_binding) ? new Error("Wrong signature type; got '" + a + "' but wanted '" + b + "'") : !this._service_obj_check(json != null ? (_ref6 = json.body) != null ? _ref6.service : void 0 : void 0) ? new Error("Bad service object found") : (kid = json != null ? (_ref7 = json.body) != null ? (_ref8 = _ref7.key) != null ? _ref8.key_id : void 0 : void 0 : void 0) == null ? new Error("Needed a body.key.key_id but none given") : !bufeq_secure(this.km.get_pgp_key_id(), new Buffer(kid, "hex")) ? new Error("Verification key doesn't match packet (via key ID)") : (fp = json != null ? (_ref9 = json.body) != null ? (_ref10 = _ref9.key) != null ? _ref10.fingerprint : void 0 : void 0 : void 0) == null ? new Error("Needed a body.key.fingerprint but none given") : !bufeq_secure(this.km.get_pgp_fingerprint(), new Buffer(fp, "hex")) ? new Error("Verifiation key doesn't match packet (via fingerprint)") : null;
      return cb(err);
    };

    return WebServiceBinding;

  })(Base);

  RemoteBinding = (function(_super) {
    __extends(RemoteBinding, _super);

    function RemoteBinding() {
      _ref1 = RemoteBinding.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    RemoteBinding.prototype._service_obj_check = function(x) {
      var so;
      so = this.service_obj();
      return (x != null) && (so.username === x.username) && (so.name === x.name);
    };

    RemoteBinding.prototype.service_obj = function() {
      return {
        name: this.service_name(),
        username: this.user.remote
      };
    };

    return RemoteBinding;

  })(WebServiceBinding);

  TwitterBinding = (function(_super) {
    __extends(TwitterBinding, _super);

    function TwitterBinding() {
      _ref2 = TwitterBinding.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    TwitterBinding.prototype.service_name = function() {
      return "twitter";
    };

    TwitterBinding.prototype.proof_type = function() {
      return constants.proof_types.twitter;
    };

    return TwitterBinding;

  })(RemoteBinding);

  KeybaseBinding = (function(_super) {
    __extends(KeybaseBinding, _super);

    function KeybaseBinding() {
      _ref3 = KeybaseBinding.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    KeybaseBinding.prototype._service_obj_check = function(x) {
      return x == null;
    };

    KeybaseBinding.prototype.service_name = function() {
      return "keybase";
    };

    KeybaseBinding.prototype.proof_type = function() {
      return constants.proof_types.keybase;
    };

    KeybaseBinding.prototype.is_remote_proof = function() {
      return false;
    };

    KeybaseBinding.prototype.service_obj = function() {
      return null;
    };

    return KeybaseBinding;

  })(WebServiceBinding);

  GithubBinding = (function(_super) {
    __extends(GithubBinding, _super);

    function GithubBinding() {
      _ref4 = GithubBinding.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    GithubBinding.prototype.service_name = function() {
      return "github";
    };

    GithubBinding.prototype.proof_type = function() {
      return constants.proof_types.github;
    };

    return GithubBinding;

  })(RemoteBinding);

  exports.TwitterBinding = TwitterBinding;

  exports.KeybaseBinding = KeybaseBinding;

  exports.GithubBinding = GithubBinding;

}).call(this);
