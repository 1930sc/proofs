// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Base, KCP, SHA256, TwitterBinding, WebServiceBinding, WordArray, base64u, constants, kbpgp, triplesec, unix_time, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  kbpgp = require('kbpgp');

  Base = require('./base').Base;

  constants = require('./constants').constants;

  KCP = kbpgp["const"].openpgp;

  _ref = kbpgp.util, unix_time = _ref.unix_time, base64u = _ref.base64u;

  triplesec = require('triplesec');

  WordArray = triplesec.WordArray;

  SHA256 = triplesec.hash.SHA256;

  WebServiceBinding = (function(_super) {
    __extends(WebServiceBinding, _super);

    function WebServiceBinding(_arg) {
      var km;
      km = _arg.km, this.seqno = _arg.seqno, this.username = _arg.username, this.host = _arg.host;
      WebServiceBinding.__super__.constructor.call(this, {
        km: km
      });
    }

    WebServiceBinding.prototype.json = function() {
      return {
        tag: constants.tags.sig,
        body: {
          version: constants.versions.sig,
          type: constants.sig_types.web_service_binding,
          service: {
            name: this.service_name(),
            username: this.username.remote
          },
          key: {
            host: this.host,
            username: this.username.local,
            key_id: this.km.get_pgp_key_id().toString('hex'),
            fingerprint: this.km.get_pgp_fingerprint().toString('hex')
          },
          date: unix_time(),
          expire_in: constants.expire_in,
          seqno: this.seqno
        }
      };
    };

    return WebServiceBinding;

  })(Base);

  TwitterBinding = (function(_super) {
    __extends(TwitterBinding, _super);

    function TwitterBinding() {
      _ref1 = TwitterBinding.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TwitterBinding.prototype.service_name = function() {
      return "twitter.com";
    };

    return TwitterBinding;

  })(WebServiceBinding);

  exports.TwitterBinding = TwitterBinding;

}).call(this);
