// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Base, TwitterBinding, WebServiceBinding, constants, kbpgp, unix_time, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  kbpgp = require('kbpgp');

  Base = require('./base').Base;

  constants = require('./constants').constants;

  unix_time = kbpgp.util.unix_time;

  WebServiceBinding = (function(_super) {
    __extends(WebServiceBinding, _super);

    function WebServiceBinding(_arg) {
      var km;
      km = _arg.km, this.seqno = _arg.seqno, this.username = _arg.username, this.host = _arg.host;
      WebServiceBinding.__super__.constructor.call(this, {
        km: km
      });
    }

    WebServiceBinding.prototype.json = function() {
      return WebServiceBinding.__super__.json.call(this, {
        seqno: this.seqno,
        body: {
          version: constants.versions.sig,
          type: constants.sig_types.web_service_binding,
          service: {
            name: this.service_name(),
            username: this.username.remote
          },
          key: {
            host: this.host,
            username: this.username.local,
            key_id: this.km.get_pgp_key_id().toString('hex'),
            fingerprint: this.km.get_pgp_fingerprint().toString('hex')
          }
        }
      });
    };

    WebServiceBinding.prototype._v_check = function(_arg, cb) {
      var a, b, err, json, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      json = _arg.json;
      return err = (a = json != null ? (_ref = json.body) != null ? _ref.type : void 0 : void 0) !== (b = constants.sig_types.web_service_binding) ? new Error("Wrong signature type; got '" + a + "' but wanted '" + b + "'") : (a = json != null ? (_ref1 = json.body) != null ? _ref1.service : void 0 : void 0) !== (b = this.service_name()) ? new Error("Wrong service name; got '" + a + "' but wanted '" + b + "'") : !bufeq_secure(this.km.get_pgp_key_id(), json != null ? (_ref2 = json.body) != null ? (_ref3 = _ref2.key) != null ? _ref3.key_id : void 0 : void 0 : void 0) ? new Error("Verification key doesn't match packet (via key ID)") : !bufeq_secure(this.km.get_pgp_fingerprint(), json != null ? (_ref4 = json.body) != null ? (_ref5 = _ref4.key) != null ? _ref5.fingerprint : void 0 : void 0 : void 0) ? new Error("Verifiation key doesn't match packet (via fingerprint)") : null;
    };

    return WebServiceBinding;

  })(Base);

  TwitterBinding = (function(_super) {
    __extends(TwitterBinding, _super);

    function TwitterBinding() {
      _ref = TwitterBinding.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TwitterBinding.prototype.service_name = function() {
      return "twitter.com";
    };

    return TwitterBinding;

  })(WebServiceBinding);

  exports.TwitterBinding = TwitterBinding;

}).call(this);
