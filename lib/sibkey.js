// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var Base, Dualkey, Sibkey, Subkey, SubkeyBase, constants, iced, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  constants = require('./constants').constants;

  _ref = require('./subkey'), Subkey = _ref.Subkey, SubkeyBase = _ref.SubkeyBase;

  exports.Sibkey = Sibkey = (function(_super) {
    __extends(Sibkey, _super);

    Sibkey.prototype.get_field = function() {
      return "sibkey";
    };

    Sibkey.prototype.get_subkey = function() {
      return this.sibkey;
    };

    Sibkey.prototype.get_subkm = function() {
      return this.sibkm;
    };

    Sibkey.prototype.set_subkey = function(s) {
      return this.sibkey = s;
    };

    Sibkey.prototype._type = function() {
      return constants.sig_types.sibkey;
    };

    Sibkey.prototype.need_reverse_sig = function() {
      return true;
    };

    function Sibkey(obj) {
      this.sibkey = obj.sibkey;
      this.sibkm = obj.sibkm;
      Sibkey.__super__.constructor.call(this, obj);
    }

    return Sibkey;

  })(SubkeyBase);

  exports.Dualkey = Dualkey = (function(_super) {
    __extends(Dualkey, _super);

    function Dualkey(obj) {
      this.sibkey = new Sibkey(obj);
      this.subkey = new Subkey(obj);
      this.device = obj.device;
      Dualkey.__super__.constructor.call(this, obj);
    }

    Dualkey.prototype._type = function() {
      return constants.sig_types.dualkey;
    };

    Dualkey.prototype._json = function() {
      var ret, sib, sub;
      ret = Dualkey.__super__._json.call(this, {});
      ret.body.device = this.device;
      sib = this.sibkey._json();
      sub = this.subkey._json();
      ret.body.subkey = sub.body.subkey;
      ret.body.sibkey = sib.body.sibkey;
      return ret;
    };

    Dualkey.prototype._v_generate = function(args, cb) {
      var err, err2, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/sibkey.iced",
            funcname: "Dualkey._v_generate"
          });
          _this.sibkey._v_generate(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 43
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/proofs/src/sibkey.iced",
              funcname: "Dualkey._v_generate"
            });
            _this.subkey._v_generate(args, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err2 = arguments[0];
                };
              })(),
              lineno: 44
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(err || err2);
          });
        };
      })(this));
    };

    Dualkey.prototype._v_check = function(_arg, cb) {
      var err, json, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      json = _arg.json;
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/sibkey.iced",
            funcname: "Dualkey._v_check"
          });
          _this.sibkey._v_check({
            json: json
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 49
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (err == null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/proofs/src/sibkey.iced",
                  funcname: "Dualkey._v_check"
                });
                _this.subkey._v_check({
                  json: json
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 50
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    return Dualkey;

  })(Base);

}).call(this);
